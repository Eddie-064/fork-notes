apiVersion: v1
kind: Service
metadata:
  name: common-ingressgateway
  namespace: istio-ingress
spec:
  # 建议使用 aws-load-balancer-controller 绑定 AWS NLB，使用 IP 模式
  # 但是要注意 NLB 开跨区负载均衡是收费的！
  type: LoadBalancer
  selector:
    istio: common-ingressgateway
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 8080
    - name: https
      protocol: TCP
      port: 443
      targetPort: 8443
    - name: http3 # HTTP/3 use UDP protocol
      protocol: UDP
      port: 443
      targetPort: 8443
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: common-ingressgateway
  namespace: istio-ingress
spec:
  selector:
    matchLabels:
      istio: common-ingressgateway
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 10%
      maxUnavailable: 0
  template:
    metadata:
      annotations:
        # Select the gateway injection template (rather than the default sidecar template)
        inject.istio.io/templates: gateway
      labels:
        # Set a unique label for the gateway. This is required to ensure Gateways can select this workload
        istio: common-ingressgateway
        # Enable gateway injection. If connecting to a revisioned control plane, replace with "istio.io/rev: revision-name"
        sidecar.istio.io/inject: "true"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: istio
                      operator: In
                      values:
                        - common-ingressgateway
                topologyKey: kubernetes.io/hostname
              weight: 1
      nodeSelector:
        eks.amazonaws.com/nodegroup: network-proxy # 使用专用节点组
      containers:
        - name: istio-proxy
          image: auto # The image will automatically update each time the pod starts.
          resources:
            requests:
              cpu: 1000m
              memory: 500Mi
            limits:
              cpu: 1000m
              memory: 500Mi
---
# Set up roles to allow reading credentials for TLS
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: common-ingressgateway-sds
  namespace: istio-ingress
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: common-ingressgateway-sds
  namespace: istio-ingress
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: common-ingressgateway-sds
subjects:
  - kind: ServiceAccount
    name: default
---
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  labels:
    istio: common-ingressgateway
  name: common-ingressgateway
  namespace: istio-ingress
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: common-ingressgateway
  maxReplicas: 100
  minReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          # 网关的目标 CPU 目标值得看使用场景
          # 对于流量波动比较大的，资源就得预留得更多些
          # 比如假设流量在 3mins 内（节点扩容 + 网关 Pod 就绪的大概用时）存在 20% 的流量波动
          # 那么如果要确保 CPU 利用率在 80% 内，平均 CPU 的设置就不能超过 60%
          averageUtilization: 55
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: common-ingressgateway
  namespace: istio-ingress
  labels:
    istio: common-ingressgateway
spec:
  minAvailable: 60%
  selector:
    matchLabels:
      istio: common-ingressgateway
