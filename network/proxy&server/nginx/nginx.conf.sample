# 参考资料：
#     - https://www.nginx.com/blog/performance-tuning-tips-tricks/
#     - https://www.nginx.com/blog/tuning-nginx/
#     - https://docs.nginx.com/nginx/admin-guide/web-server/serving-static-content/
#     - [【优化】nginx启用reuseport](https://wfhu.gitbooks.io/life/content/chapter7/nginx-enable-reuseport.html)
#     - [digitalocean/nginxconfig.io](https://github.com/digitalocean/nginxconfig.io)
#     - [kubernetes/ingress-nginx](https://github.com/kubernetes/ingress-nginx)
#     - [nginx-admins-handbook](https://github.com/trimstray/nginx-admins-handbook)

# user  nobody;

# 个人感觉 2 核以下可设为 2，超过 2 核建议设为与 cpu 核数一致。
# 为了避免 nginx 无法感知容器环境的问题，在容器中不应使用 `auto`
worker_processes     2;

# openresty 的 nginx pid 默认位置
pid        /usr/local/openresty/nginx/logs/nginx.pid;

# global error logs, write into /dev/stderr.
error_log stderr error;

worker_shutdown_timeout 240s;

worker_rlimit_nofile 523264;
events {
    # 包含了上下游的所有连接
    worker_connections  60000;
    multi_accept        on;
    use                 epoll;
    accept_mutex        off;
}

http {
    charset            utf-8;
    server_tokens      off;
    more_clear_headers Server;

    include       mime.types;
    default_type  application/octet-stream;

    # a log format demo
    log_format main '[$time_local] remote_addr=$remote_addr '
                    '"$request" $status $body_bytes_sent "host=$host"'
                    'gzip_ratio="$gzip_ratio" '
                    '"scheme=$scheme" "$ssl_protocol" "$ssl_cipher" '
                    '"http_x_forwarded_for=$http_x_forwarded_for" referer="$http_referer" "user_agent="$http_user_agent" '
                    'req_time="$request_time" up_conn_time="$upstream_connect_time" up_header_time="$upstream_header_time" up_resp_time="$upstream_response_time"';
    access_log /dev/stdout main;

    # gzip
    gzip            on;
    gzip_vary       on;
    gzip_proxied    any;
    # 启用 gzip 压缩的最小 size，默认值 20
    # 很多人建议将此值设为 1k，但是对于 API 调用而言不太合适，因为大部分响应都不会超过 1k
    gzip_min_length  20;
    gzip_http_version 1.0;
    gzip_buffers     32 4k;
    # 可选 1-9，级别越高压缩率越高
    # 级别 1 压缩性价比最高，4-6 是性能与压缩率的一个平衡点
    # 据说 cloudfront 默认使用的压缩比为 6
    gzip_comp_level 6;
    gzip_types      text/plain text/css text/xml application/json application/javascript application/xml application/rss+xml application/atom+xml image/svg+xml;

    # 大文件传输优化
    # https://nginx.org/en/docs/http/ngx_http_core_module.html#aio
    aio                 threads;
    aio_write           on;
    # sendfile 是一个系统调用，直接在内核空间完成文件发送，不需要先 read 再 write，没有上下文切换开销
    # 启用 sendfile 可以提高 Nginx 静态资源托管效率
    sendfile            on;
    sendfile_max_chunk  2m;
    # https://imququ.com/post/my-nginx-conf-for-wpo.html
    # TCP_NOPUSH 是要等数据包累积到一定大小才发送
    tcp_nopush          on;
    # TCP_NODELAY 是要尽快发送。跟 TCP_NOPUSH 一起启用，效果是先填满包，再尽快发送
    tcp_nodelay         on;

    log_subrequest      on;

    reset_timedout_connection on;

    # 跟客户端的长连接设置
    # 默认 75s，对于内部服务器通讯，可以适当加长到 120s
    # 对于外部通信，设置得比较长会导致 ESTAB 连接增多，可以适当调低
    keepalive_timeout 75s;
    # 默认 1000，对于内部服务器通讯，高 QPS 下可能会产生较多 TIME-WAIT
    keepalive_requests 1000;

    client_body_temp_path           /tmp/client-body;
    proxy_temp_path                 /tmp/proxy-temp;

    client_header_buffer_size       1k;
    client_header_timeout           60s;
    large_client_header_buffers     4 8k;

    # 客户端上传的最大 body 大小，建议根据实际场景调整
    client_max_body_size            16m;
    client_body_buffer_size         8k;
    client_body_timeout             60s;

    types_hash_max_size             2048;
    server_names_hash_max_size      1024;
    # bucket size 要设置得比域名数量更大一点
    server_names_hash_bucket_size   128;

    proxy_headers_hash_max_size     512;
    proxy_headers_hash_bucket_size  64;

    variables_hash_bucket_size      256;
    variables_hash_max_size         2048;

    # 过滤掉不规范的 headers
    underscores_in_headers          off;
    ignore_invalid_headers          on;

    open_file_cache         max=5000 inactive=300s;
    open_file_cache_valid   300s;
    open_file_cache_min_uses 2;
    open_file_cache_errors  on;

    proxy_buffering on;
    proxy_buffer_size 4k;
    proxy_buffers     4 8k;
    proxy_busy_buffers_size 8k;

    proxy_cache_valid       200 301 302 20m;
    proxy_cache_valid       404 1m;
    proxy_cache_use_stale   error timeout invalid_header updating;
    proxy_cache_min_uses    1;
    proxy_cache_key "$scheme$host$request_uri";

    # 设置和后端的超时时间.
    proxy_connect_timeout      60;
    proxy_send_timeout         60;
    proxy_read_timeout         60;

    # 长连接, http1.1 协议下 Nginx 会保持连接 30s.
    proxy_http_version 1.1;
    proxy_set_header Connection "";

    # SSL
    ssl_session_timeout    1d;
    ssl_session_cache      shared:SSL:10m; # about 40000 sessions
    ssl_session_tickets    off;

    # Diffie-Hellman parameter for DHE ciphersuites
    # generated by `openssl dhparam -out ./dhparam.pem 2048`
    ssl_dhparam            dhparam.pem;

    # OCSP Stapling
    ssl_stapling           on;
    ssl_stapling_verify    on;

    # resolver in kubernetes
    resolver kube-dns.kube-system.svc.cluster.local valid=10s;
    resolver_timeout       2s;

    # verify chain of trust of OCSP response using Root CA and Intermediate certs
    # you can generate this file by yourshelf, or by certbot
    ssl_trusted_certificate root_intermediate_ca_bundle.pem;

    # Mozilla Intermediate configuration
    ssl_protocols          TLSv1.2 TLSv1.3;
    ssl_ciphers            ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

    # allow any source ip
    allow 0.0.0.0/0;

    server {
        # process the requests do not match any server_name
        # set several additional parameters specific to socket-related system calls: 
        #    reuseport & backlog
        listen 8080 default reuseport backlog=4096;

        access_log off;

        location /health {
            return 200;
        }
    }


    server {
        # process the requests do not match any sni!
        # set several additional parameters specific to socket-related system calls: 
        #    reuseport & backlog
        # reuseport can only be set once per port!
        listen 8443 default ssl http2 reuseport backlog=4096;
        server_name _;

        # reject all handshake with unknown server_name
        # http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_reject_handshake
        ssl_reject_handshake on;
    }

    include sites-enabled/*;
    # include other files...
    # ...
}
